{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"zillionare core types \u00b6 \u5b9a\u4e49\u4e86zillionare\u5e73\u53f0\u4e2d\u591a\u6570\u9879\u76ee/\u6a21\u5757\u9700\u8981\u4f7f\u7528\u7684\u6838\u5fc3\u6570\u636e\u7c7b\u578b\uff0c\u6bd4\u5982FrameType, SecuirityType, bars_dtype\uff0c BarsArray\u7b49\u3002 Free software: MIT Documentation: https://zillionare.github.io/core-types Features \u00b6 \u63d0\u4f9b\u4e86FrameType, SecurityType, bars_dtype\u7b49\u6570\u636e\u7c7b\u578b \u63d0\u4f9b\u4e86BarsArray, BarsPanel, BarsWithLimitArray\u7b49type annotation \uff08type hint)\u7c7b\u578b \u63d0\u4f9b\u4e86quote_fetcher\u63a5\u53e3\u7c7b\u3002 Credits \u00b6 \u672c\u9879\u76ee\u4f7f\u7528 ppw \u521b\u5efa\uff0c\u5e76\u9075\u5faappw\u5b9a\u4e49\u7684\u4ee3\u7801\u98ce\u683c\u548c\u8d28\u91cf\u89c4\u8303\u3002","title":"home"},{"location":"#zillionare-core-types","text":"\u5b9a\u4e49\u4e86zillionare\u5e73\u53f0\u4e2d\u591a\u6570\u9879\u76ee/\u6a21\u5757\u9700\u8981\u4f7f\u7528\u7684\u6838\u5fc3\u6570\u636e\u7c7b\u578b\uff0c\u6bd4\u5982FrameType, SecuirityType, bars_dtype\uff0c BarsArray\u7b49\u3002 Free software: MIT Documentation: https://zillionare.github.io/core-types","title":"zillionare core types"},{"location":"#features","text":"\u63d0\u4f9b\u4e86FrameType, SecurityType, bars_dtype\u7b49\u6570\u636e\u7c7b\u578b \u63d0\u4f9b\u4e86BarsArray, BarsPanel, BarsWithLimitArray\u7b49type annotation \uff08type hint)\u7c7b\u578b \u63d0\u4f9b\u4e86quote_fetcher\u63a5\u53e3\u7c7b\u3002","title":"Features"},{"location":"#credits","text":"\u672c\u9879\u76ee\u4f7f\u7528 ppw \u521b\u5efa\uff0c\u5e76\u9075\u5faappw\u5b9a\u4e49\u7684\u4ee3\u7801\u98ce\u683c\u548c\u8d28\u91cf\u89c4\u8303\u3002","title":"Credits"},{"location":"api/","text":"quote_fetcher \u00b6 Interface for quotes worker QuotesFetcher ( ABC ) \u00b6 Source code in coretypes/quote_fetcher.py class QuotesFetcher ( ABC ): async def get_quota ( self ) -> int : \"\"\"\u83b7\u53d6\u63a5\u53e3\u5f53\u524d\u53ef\u7528\u7684quota Raises: NotImplementedError: [description] Returns: int: [description] \"\"\" raise NotImplementedError async def get_security_list ( self ) -> numpy . ndarray : \"\"\"fetch security list from server. The returned list is a numpy.ndarray, which each elements should look like: code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock 000002.XSHE \u4e07\u79d1A WKA 1991-01-29 2200-01-01 stock all fields are string type Returns: numpy.ndarray: [description] \"\"\" raise NotImplementedError async def get_bars ( self , sec : str , end : Frame , n_bars : int , frame_type : FrameType , allow_unclosed = True , ) -> numpy . ndarray : \"\"\"\u53d6n\u4e2a\u5355\u4f4d\u7684k\u7ebf\u6570\u636e\u3002 k\u7ebf\u5468\u671f\u7531frame_type\u6307\u5b9a\u3002\u6700\u540e\u7ed3\u675f\u5468\u671f\u4e3aend\u3002\u80a1\u7968\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u4f1a\u4f7f\u7528None\u586b\u5145\u3002 Args: sec (str): \u8bc1\u5238\u4ee3\u7801 end (Frame): n_bars (int): frame_type (FrameType): allow_unclosed (bool): \u4e3a\u771f\u65f6\uff0c\u5f53\u524d\u672a\u7ed3\u675f\u7684\u5e27\u6570\u636e\u4e5f\u83b7\u53d6 Returns: a numpy.ndarray, with each element is: 'frame': datetime.date or datetime.datetime, depends on frame_type. Denotes which time frame the data belongs . 'open, high, low, close': float 'volume': double 'amount': the buy/sell amount in total, double 'factor': float, may exist or not \"\"\" raise NotImplementedError async def get_price ( self , sec : Union [ List , str ], end_at : Union [ str , datetime . datetime ], n_bars : int , frame_type : str , ) -> Dict [ str , numpy . recarray ]: raise NotImplementedError async def create_instance ( self , ** kwargs ): raise NotImplementedError async def get_all_trade_days ( self ): \"\"\"\u8fd4\u56de\u4ea4\u6613\u65e5\u5386\u3002\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u8fd4\u56de\u7684\u65f6\u95f4\u8de8\u5ea6\u4e0d\u4e00\u6837\uff0c\u4f46\u76f8\u540c\u8de8\u5ea6\u5185\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u3002\u5bf9\u5df2 \u7ecf\u8fc7\u53bb\u7684\u4ea4\u6613\u65e5\uff0c\u53ef\u4ee5\u7528\u4e0a\u8bc1\u6307\u6570\u6765\u9a8c\u8bc1\u3002 \"\"\" raise NotImplementedError async def get_valuation ( self , code : Union [ str , List [ str ]], day : Frame ) -> numpy . ndarray : \"\"\"\u8bfb\u53d6code\u6307\u5b9a\u7684\u80a1\u7968\u5728date\u6307\u5b9a\u65e5\u671f\u7684\u5e02\u503c\u6570\u636e\u3002 \u8fd4\u56de\u6570\u636e\u5305\u62ec\uff1a code: \u80a1\u7968\u4ee3\u7801 day: \u65e5\u671f captialization: \u603b\u80a1\u672c circulating_cap: \u6d41\u901a\u80a1\u672c\uff08\u4e07\u80a1\uff09 market_cap: \u603b\u5e02\u503c\uff08\u4ebf\u5143\uff09 circulating_market_cap\uff1a \u6d41\u901a\u5e02\u503c\uff08\u4ebf\u5143\uff09 turnover_ration: \u6362\u624b\u7387\uff08%\uff09 pe_ratio: \u5e02\u76c8\u7387\uff08PE,TTM\uff09\u6bcf\u80a1\u5e02\u4ef7\u4e3a\u6bcf\u80a1\u6536\u76ca\u7684\u500d\u6570\uff0c\u53cd\u6620\u6295\u8d44\u4eba\u5bf9\u6bcf\u5143\u51c0\u5229\u6da6\u6240\u613f\u652f\u4ed8\u7684\u4ef7 \u683c\uff0c\u7528\u6765\u4f30\u8ba1\u80a1\u7968\u7684\u6295\u8d44\u62a5\u916c\u548c\u98ce\u9669 pe_ratio_lyr: \u5e02\u76c8\u7387\uff08PE\uff09\uff0c\u4ee5\u4e0a\u4e00\u5e74\u5ea6\u6bcf\u80a1\u76c8\u5229\u8ba1\u7b97\u7684\u9759\u6001\u5e02\u76c8\u7387. \u80a1\u4ef7/\u6700\u8fd1\u5e74\u5ea6\u62a5\u544aEPS pb_ratio: \u5e02\u51c0\u7387\uff08PB\uff09 ps_ratio: \u5e02\u9500\u7387(PS) pcf_ratio: \u5e02\u73b0\u7387\uff08PCF\uff09 Args: code (Union[str, List[str]]): [description] day (Frame): [description] Returns: numpy.ndarray: [description] \"\"\" raise NotImplementedError async def get_fund_list ( self , codes : Union [ str , List [ str ]] = None ) -> numpy . ndarray : \"\"\" \u83b7\u53d6\u6240\u6709\u7684\u57fa\u91d1\u57fa\u672c\u4fe1\u606f Args: codes (Union[str, List[str]]): [description] Returns: np.array: [\u57fa\u91d1\u7684\u57fa\u672c\u4fe1\u606f] \"\"\" raise NotImplementedError async def get_fund_portfolio_stock ( self , codes : Union [ str , List [ str ]], pub_date : Union [ str , datetime . date ] = None ) -> numpy . array : raise NotImplementedError async def get_fund_net_value ( self , codes : Union [ str , List [ str ]], day : datetime . date = None , ) -> numpy . array : raise NotImplementedError async def get_fund_share_daily ( self , codes : Union [ str , List [ str ]] = None , day : datetime . date = None ) -> numpy . array : raise NotImplementedError @deprecation . deprecated ( deprecated_in = \"0.2\" , removed_in = \"0.3\" , current_version = __version__ , details = \"Use get_quota instead\" , ) async def get_query_count ( self ): \"\"\"\u67e5\u8be2\u5f53\u65e5\u5269\u4f59\u53ef\u8c03\u7528\u6570\u636e\u6761\u6570\"\"\" raise NotImplementedError get_all_trade_days ( self ) async \u00b6 \u8fd4\u56de\u4ea4\u6613\u65e5\u5386\u3002\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u8fd4\u56de\u7684\u65f6\u95f4\u8de8\u5ea6\u4e0d\u4e00\u6837\uff0c\u4f46\u76f8\u540c\u8de8\u5ea6\u5185\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u3002\u5bf9\u5df2 \u7ecf\u8fc7\u53bb\u7684\u4ea4\u6613\u65e5\uff0c\u53ef\u4ee5\u7528\u4e0a\u8bc1\u6307\u6570\u6765\u9a8c\u8bc1\u3002 Source code in coretypes/quote_fetcher.py async def get_all_trade_days ( self ): \"\"\"\u8fd4\u56de\u4ea4\u6613\u65e5\u5386\u3002\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u8fd4\u56de\u7684\u65f6\u95f4\u8de8\u5ea6\u4e0d\u4e00\u6837\uff0c\u4f46\u76f8\u540c\u8de8\u5ea6\u5185\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u3002\u5bf9\u5df2 \u7ecf\u8fc7\u53bb\u7684\u4ea4\u6613\u65e5\uff0c\u53ef\u4ee5\u7528\u4e0a\u8bc1\u6307\u6570\u6765\u9a8c\u8bc1\u3002 \"\"\" raise NotImplementedError get_bars ( self , sec , end , n_bars , frame_type , allow_unclosed = True ) async \u00b6 \u53d6n\u4e2a\u5355\u4f4d\u7684k\u7ebf\u6570\u636e\u3002 k\u7ebf\u5468\u671f\u7531frame_type\u6307\u5b9a\u3002\u6700\u540e\u7ed3\u675f\u5468\u671f\u4e3aend\u3002\u80a1\u7968\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u4f1a\u4f7f\u7528None\u586b\u5145\u3002 Parameters: Name Type Description Default sec str \u8bc1\u5238\u4ee3\u7801 required end Frame required n_bars int required frame_type FrameType required allow_unclosed bool \u4e3a\u771f\u65f6\uff0c\u5f53\u524d\u672a\u7ed3\u675f\u7684\u5e27\u6570\u636e\u4e5f\u83b7\u53d6 True Returns: Type Description a numpy.ndarray, with each element is 'frame': datetime.date or datetime.datetime, depends on frame_type. Denotes which time frame the data belongs . 'open, high, low, close': float 'volume': double 'amount': the buy/sell amount in total, double 'factor': float, may exist or not Source code in coretypes/quote_fetcher.py async def get_bars ( self , sec : str , end : Frame , n_bars : int , frame_type : FrameType , allow_unclosed = True , ) -> numpy . ndarray : \"\"\"\u53d6n\u4e2a\u5355\u4f4d\u7684k\u7ebf\u6570\u636e\u3002 k\u7ebf\u5468\u671f\u7531frame_type\u6307\u5b9a\u3002\u6700\u540e\u7ed3\u675f\u5468\u671f\u4e3aend\u3002\u80a1\u7968\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u4f1a\u4f7f\u7528None\u586b\u5145\u3002 Args: sec (str): \u8bc1\u5238\u4ee3\u7801 end (Frame): n_bars (int): frame_type (FrameType): allow_unclosed (bool): \u4e3a\u771f\u65f6\uff0c\u5f53\u524d\u672a\u7ed3\u675f\u7684\u5e27\u6570\u636e\u4e5f\u83b7\u53d6 Returns: a numpy.ndarray, with each element is: 'frame': datetime.date or datetime.datetime, depends on frame_type. Denotes which time frame the data belongs . 'open, high, low, close': float 'volume': double 'amount': the buy/sell amount in total, double 'factor': float, may exist or not \"\"\" raise NotImplementedError get_fund_list ( self , codes = None ) async \u00b6 \u83b7\u53d6\u6240\u6709\u7684\u57fa\u91d1\u57fa\u672c\u4fe1\u606f Parameters: Name Type Description Default codes Union[str, List[str]] [description] None Returns: Type Description np.array [\u57fa\u91d1\u7684\u57fa\u672c\u4fe1\u606f] Source code in coretypes/quote_fetcher.py async def get_fund_list ( self , codes : Union [ str , List [ str ]] = None ) -> numpy . ndarray : \"\"\" \u83b7\u53d6\u6240\u6709\u7684\u57fa\u91d1\u57fa\u672c\u4fe1\u606f Args: codes (Union[str, List[str]]): [description] Returns: np.array: [\u57fa\u91d1\u7684\u57fa\u672c\u4fe1\u606f] \"\"\" raise NotImplementedError get_query_count ( self ) async \u00b6 \u67e5\u8be2\u5f53\u65e5\u5269\u4f59\u53ef\u8c03\u7528\u6570\u636e\u6761\u6570 .. deprecated:: 0.2 This will be removed in 0.3. Use get_quota instead Source code in coretypes/quote_fetcher.py @deprecation . deprecated ( deprecated_in = \"0.2\" , removed_in = \"0.3\" , current_version = __version__ , details = \"Use get_quota instead\" , ) async def get_query_count ( self ): \"\"\"\u67e5\u8be2\u5f53\u65e5\u5269\u4f59\u53ef\u8c03\u7528\u6570\u636e\u6761\u6570\"\"\" raise NotImplementedError get_quota ( self ) async \u00b6 \u83b7\u53d6\u63a5\u53e3\u5f53\u524d\u53ef\u7528\u7684quota Exceptions: Type Description NotImplementedError [description] Returns: Type Description int [description] Source code in coretypes/quote_fetcher.py async def get_quota ( self ) -> int : \"\"\"\u83b7\u53d6\u63a5\u53e3\u5f53\u524d\u53ef\u7528\u7684quota Raises: NotImplementedError: [description] Returns: int: [description] \"\"\" raise NotImplementedError get_security_list ( self ) async \u00b6 fetch security list from server. The returned list is a numpy.ndarray, which each elements should look like: code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock 000002.XSHE \u4e07\u79d1A WKA 1991-01-29 2200-01-01 stock all fields are string type Returns: Type Description numpy.ndarray [description] Source code in coretypes/quote_fetcher.py async def get_security_list ( self ) -> numpy . ndarray : \"\"\"fetch security list from server. The returned list is a numpy.ndarray, which each elements should look like: code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock 000002.XSHE \u4e07\u79d1A WKA 1991-01-29 2200-01-01 stock all fields are string type Returns: numpy.ndarray: [description] \"\"\" raise NotImplementedError get_valuation ( self , code , day ) async \u00b6 \u8bfb\u53d6code\u6307\u5b9a\u7684\u80a1\u7968\u5728date\u6307\u5b9a\u65e5\u671f\u7684\u5e02\u503c\u6570\u636e\u3002 \u8fd4\u56de\u6570\u636e\u5305\u62ec\uff1a code: \u80a1\u7968\u4ee3\u7801 day: \u65e5\u671f captialization: \u603b\u80a1\u672c circulating_cap: \u6d41\u901a\u80a1\u672c\uff08\u4e07\u80a1\uff09 market_cap: \u603b\u5e02\u503c\uff08\u4ebf\u5143\uff09 circulating_market_cap\uff1a \u6d41\u901a\u5e02\u503c\uff08\u4ebf\u5143\uff09 turnover_ration: \u6362\u624b\u7387\uff08%\uff09 pe_ratio: \u5e02\u76c8\u7387\uff08PE,TTM\uff09\u6bcf\u80a1\u5e02\u4ef7\u4e3a\u6bcf\u80a1\u6536\u76ca\u7684\u500d\u6570\uff0c\u53cd\u6620\u6295\u8d44\u4eba\u5bf9\u6bcf\u5143\u51c0\u5229\u6da6\u6240\u613f\u652f\u4ed8\u7684\u4ef7 \u683c\uff0c\u7528\u6765\u4f30\u8ba1\u80a1\u7968\u7684\u6295\u8d44\u62a5\u916c\u548c\u98ce\u9669 pe_ratio_lyr: \u5e02\u76c8\u7387\uff08PE\uff09\uff0c\u4ee5\u4e0a\u4e00\u5e74\u5ea6\u6bcf\u80a1\u76c8\u5229\u8ba1\u7b97\u7684\u9759\u6001\u5e02\u76c8\u7387. \u80a1\u4ef7/\u6700\u8fd1\u5e74\u5ea6\u62a5\u544aEPS pb_ratio: \u5e02\u51c0\u7387\uff08PB\uff09 ps_ratio: \u5e02\u9500\u7387(PS) pcf_ratio: \u5e02\u73b0\u7387\uff08PCF\uff09 Parameters: Name Type Description Default code Union[str, List[str]] [description] required day Frame [description] required Returns: Type Description numpy.ndarray [description] Source code in coretypes/quote_fetcher.py async def get_valuation ( self , code : Union [ str , List [ str ]], day : Frame ) -> numpy . ndarray : \"\"\"\u8bfb\u53d6code\u6307\u5b9a\u7684\u80a1\u7968\u5728date\u6307\u5b9a\u65e5\u671f\u7684\u5e02\u503c\u6570\u636e\u3002 \u8fd4\u56de\u6570\u636e\u5305\u62ec\uff1a code: \u80a1\u7968\u4ee3\u7801 day: \u65e5\u671f captialization: \u603b\u80a1\u672c circulating_cap: \u6d41\u901a\u80a1\u672c\uff08\u4e07\u80a1\uff09 market_cap: \u603b\u5e02\u503c\uff08\u4ebf\u5143\uff09 circulating_market_cap\uff1a \u6d41\u901a\u5e02\u503c\uff08\u4ebf\u5143\uff09 turnover_ration: \u6362\u624b\u7387\uff08%\uff09 pe_ratio: \u5e02\u76c8\u7387\uff08PE,TTM\uff09\u6bcf\u80a1\u5e02\u4ef7\u4e3a\u6bcf\u80a1\u6536\u76ca\u7684\u500d\u6570\uff0c\u53cd\u6620\u6295\u8d44\u4eba\u5bf9\u6bcf\u5143\u51c0\u5229\u6da6\u6240\u613f\u652f\u4ed8\u7684\u4ef7 \u683c\uff0c\u7528\u6765\u4f30\u8ba1\u80a1\u7968\u7684\u6295\u8d44\u62a5\u916c\u548c\u98ce\u9669 pe_ratio_lyr: \u5e02\u76c8\u7387\uff08PE\uff09\uff0c\u4ee5\u4e0a\u4e00\u5e74\u5ea6\u6bcf\u80a1\u76c8\u5229\u8ba1\u7b97\u7684\u9759\u6001\u5e02\u76c8\u7387. \u80a1\u4ef7/\u6700\u8fd1\u5e74\u5ea6\u62a5\u544aEPS pb_ratio: \u5e02\u51c0\u7387\uff08PB\uff09 ps_ratio: \u5e02\u9500\u7387(PS) pcf_ratio: \u5e02\u73b0\u7387\uff08PCF\uff09 Args: code (Union[str, List[str]]): [description] day (Frame): [description] Returns: numpy.ndarray: [description] \"\"\" raise NotImplementedError types \u00b6 Zillionare\u4e2d\u8981\u7528\u5230\u7684\u6838\u5fc3\u6570\u636e\u7c7b\u578b\u90fd\u5b9a\u4e49\u5728\u6b64\u6a21\u5757\u4e2d\u3002\u6ce8\u610f\u90e8\u5206\u5b9a\u4e49\u4ec5\u80fd\u7528\u4f5cType Annotation\uff0c\u6bd4\u5982BarsArray\u7b49\u522b\u540d\u3002\u5b83\u4eec\u901a\u5e38\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934 BarsArray \u00b6 \u884c\u60c5\u6570\u636e(\u5305\u542b\u5217frame, open, high, low, close, volume, amount, factor)\u6570\u7ec4 BarsPanel \u00b6 \u5e26\u8bc1\u5238\u4ee3\u7801\u7684\u884c\u60c5\u6570\u636e\u6570\u7ec4 BarsWithLimitArray \u00b6 \u5e26\u6da8\u8dcc\u505c\u4ef7(high_limit, low_limit)\u7684\u884c\u60c5\u6570\u636e\u6570\u7ec4 Frame \u00b6 \u5305\u542b\u65e5\u671fdate\u548c\u65f6\u95f4datetime\u7684\u8054\u5408\u7c7b\u578b LimitPriceOnlyBarsArray \u00b6 \u4ec5\u5305\u62ec\u65e5\u671f\u3001\u4ee3\u7801\u3001\u6da8\u8dcc\u505c\u4ef7\u7684\u7684\u884c\u60c5\u6570\u636e\u6570\u7ec4 bars_cols \u00b6 \u884c\u60c5\u6570\u636e\u5217\u540d\u6570\u7ec4\uff0c\u5373[frame, open, high, low, close, volume, amount, factor] bars_dtype \u00b6 \u884c\u60c5\u6570\u636e\u5143\u7c7b\u578b\uff0c\u5305\u62ec\u5b57\u6bb5\uff08frame, open, high, low, close, volume, amount, factor) bars_dtype_with_code \u00b6 \u5e26\u8bc1\u5238\u4ee3\u7801\u7684\u884c\u60c5\u6570\u636e\u5143\u7c7b\u578b\uff0c\u5728bars_dtype\u57fa\u7840\u4e0a\u589e\u52a0\u4e86code\u5b57\u6bb5 bars_with_limit_cols \u00b6 \u5e26\u6da8\u8dcc\u505c\u4ef7\u7684\u884c\u60c5\u6570\u636e\u5217\u540d\u6570\u7ec4\uff0c\u5373[frame, open, high, low, close, volume, amount, factort high_limit, low_limit] bars_with_limit_dtype \u00b6 \u5e26\u6da8\u8dcc\u505c\u4ef7\u683c\u7684\u884c\u60c5\u6570\u636e\u5143\u7c7b\u578b\uff0c\u5305\u542bframe, open, high, low, close, volume, amount, factort high_limit, low_limit limit_price_only_dtype \u00b6 \u53ea\u5305\u542b\u6da8\u8dcc\u505c\u4ef7\u7684\u884c\u60c5\u6570\u636e\u5143\u7c7b\u578b\uff0c\u5373frame, code, high_limit, low_limit security_info_dtype \u00b6 \u8bc1\u5238\u4fe1\u606f\u7c7b\u578b\uff0c\u5305\u62eccode, alias, name, ipo, end, type\u5b57\u6bb5 FrameType ( Enum ) \u00b6 \u5bf9\u8bc1\u5238\u4ea4\u6613\u4e2dK\u7ebf\u5468\u671f\u7684\u5c01\u88c5\u3002\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u5bf9\u5e94\u5468\u671f: \u5468\u671f \u5b57\u7b26\u4e32 \u7c7b\u578b \u6570\u503c \u5e74\u7ebf 1Y FrameType.YEAR 10 \u5b63\u7ebf 1Q FrameType.QUARTER 9 \u6708\u7ebf 1M FrameType.MONTH 8 \u5468\u7ebf 1W FrameType.WEEK 7 \u65e5\u7ebf 1D FrameType.DAY 6 60\u5206\u949f\u7ebf 60m FrameType.MIN60 5 30\u5206\u949f\u7ebf 30m FrameType.MIN30 4 15\u5206\u949f\u7ebf 15m FrameType.MIN15 3 5\u5206\u949f\u7ebf 5m FrameType.MIN5 2 \u5206\u949f\u7ebf 1m FrameType.MIN1 1 Source code in coretypes/types.py class FrameType ( Enum ): \"\"\"\u5bf9\u8bc1\u5238\u4ea4\u6613\u4e2dK\u7ebf\u5468\u671f\u7684\u5c01\u88c5\u3002\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u5bf9\u5e94\u5468\u671f: | \u5468\u671f | \u5b57\u7b26\u4e32 | \u7c7b\u578b | \u6570\u503c | | --------- | --- | ------------------ | -- | | \u5e74\u7ebf | 1Y | FrameType.YEAR | 10 | | \u5b63\u7ebf | 1Q | FrameType.QUARTER | 9 | | \u6708\u7ebf | 1M | FrameType.MONTH | 8 | | \u5468\u7ebf | 1W | FrameType.WEEK | 7 | | \u65e5\u7ebf | 1D | FrameType.DAY | 6 | | 60\u5206\u949f\u7ebf | 60m | FrameType.MIN60 | 5 | | 30\u5206\u949f\u7ebf | 30m | FrameType.MIN30 | 4 | | 15\u5206\u949f\u7ebf | 15m | FrameType.MIN15 | 3 | | 5\u5206\u949f\u7ebf | 5m | FrameType.MIN5 | 2 | | \u5206\u949f\u7ebf | 1m | FrameType.MIN1 | 1 | \"\"\" DAY = \"1d\" MIN60 = \"60m\" MIN30 = \"30m\" MIN15 = \"15m\" MIN5 = \"5m\" MIN1 = \"1m\" WEEK = \"1w\" MONTH = \"1M\" QUARTER = \"1Q\" YEAR = \"1Y\" def to_int ( self ) -> int : \"\"\"\u8f6c\u6362\u4e3a\u6574\u6570\u8868\u793a\uff0c\u7528\u4e8e\u4e32\u884c\u5316\"\"\" mapping = { FrameType . MIN1 : 1 , FrameType . MIN5 : 2 , FrameType . MIN15 : 3 , FrameType . MIN30 : 4 , FrameType . MIN60 : 5 , FrameType . DAY : 6 , FrameType . WEEK : 7 , FrameType . MONTH : 8 , FrameType . QUARTER : 9 , FrameType . YEAR : 10 , } return mapping [ self ] @staticmethod def from_int ( frame_type : int ) -> \"FrameType\" : \"\"\"\u5c06\u6574\u6570\u8868\u793a\u7684`frame_type`\u8f6c\u6362\u4e3a`FrameType`\u7c7b\u578b\"\"\" mapping = { 1 : FrameType . MIN1 , 2 : FrameType . MIN5 , 3 : FrameType . MIN15 , 4 : FrameType . MIN30 , 5 : FrameType . MIN60 , 6 : FrameType . DAY , 7 : FrameType . WEEK , 8 : FrameType . MONTH , 9 : FrameType . QUARTER , 10 : FrameType . YEAR , } return mapping [ frame_type ] def __lt__ ( self , other ): if self . __class__ is other . __class__ : return self . to_int () < other . to_int () return NotImplemented def __le__ ( self , other ) -> bool : if self . __class__ is other . __class__ : return self . to_int () <= other . to_int () return NotImplemented def __ge__ ( self , other ) -> bool : if self . __class__ is other . __class__ : return self . to_int () >= other . to_int () return NotImplemented def __gt__ ( self , other ) -> bool : if self . __class__ is other . __class__ : return self . to_int () > other . to_int () return NotImplemented MarketType ( Enum ) \u00b6 \u5e02\u573a\u7c7b\u578b\u3002\u5f53\u524d\u652f\u6301\u7684\u7c7b\u578b\u4e3a\u4e0a\u4ea4\u6240 XSHG \u548c XSHE Source code in coretypes/types.py class MarketType ( Enum ): \"\"\"\u5e02\u573a\u7c7b\u578b\u3002\u5f53\u524d\u652f\u6301\u7684\u7c7b\u578b\u4e3a\u4e0a\u4ea4\u6240`XSHG`\u548c`XSHE`\"\"\" XSHG = \"XSHG\" XSHE = \"XSHE\" SecurityType ( Enum ) \u00b6 \u652f\u6301\u7684\u8bc1\u5238\u54c1\u79cd\u7c7b\u578b\u5b9a\u4e49 \u7c7b\u578b \u503c \u8bf4\u660e SecurityType.STOCK stock \u80a1\u7968\u7c7b\u578b SecurityType.INDEX index \u6307\u6570\u7c7b\u578b SecurityType.ETF etf ETF\u57fa\u91d1 SecurityType.FUND fund \u57fa\u91d1 SecurityType.LOF lof\uff0cLOF\u57fa\u91d1 SecurityType.FJA fja \u5206\u7ea7A\u57fa\u91d1 SecurityType.FJB fjb \u5206\u7ea7B\u57fa\u91d1 SecurityType.BOND bond \u503a\u5238\u57fa\u91d1 SecurityType.STOCK_B stock_b B\u80a1 SecurityType.UNKNOWN unknown \u672a\u77e5\u54c1\u79cd Source code in coretypes/types.py class SecurityType ( Enum ): \"\"\"\u652f\u6301\u7684\u8bc1\u5238\u54c1\u79cd\u7c7b\u578b\u5b9a\u4e49 | \u7c7b\u578b | \u503c | \u8bf4\u660e | | ------------------------ | --------- | ----- | | SecurityType.STOCK | stock | \u80a1\u7968\u7c7b\u578b | | SecurityType.INDEX | index | \u6307\u6570\u7c7b\u578b | | SecurityType.ETF | etf | ETF\u57fa\u91d1 | | SecurityType.FUND | fund | \u57fa\u91d1 | | SecurityType.LOF | lof\uff0cLOF\u57fa\u91d1 | | | SecurityType.FJA | fja | \u5206\u7ea7A\u57fa\u91d1 | | SecurityType.FJB | fjb | \u5206\u7ea7B\u57fa\u91d1 | | SecurityType.BOND | bond | \u503a\u5238\u57fa\u91d1 | | SecurityType.STOCK_B | stock_b | B\u80a1 | | SecurityType.UNKNOWN | unknown | \u672a\u77e5\u54c1\u79cd | \"\"\" STOCK = \"stock\" INDEX = \"index\" ETF = \"etf\" FUND = \"fund\" LOF = \"lof\" FJA = \"fja\" FJB = \"fjb\" FUTURES = \"futures\" BOND = \"bond\" STOCK_B = \"stock_b\" UNKNOWN = \"unknown\"","title":"modules"},{"location":"api/#coretypes.quote_fetcher","text":"Interface for quotes worker","title":"quote_fetcher"},{"location":"api/#coretypes.quote_fetcher.QuotesFetcher","text":"Source code in coretypes/quote_fetcher.py class QuotesFetcher ( ABC ): async def get_quota ( self ) -> int : \"\"\"\u83b7\u53d6\u63a5\u53e3\u5f53\u524d\u53ef\u7528\u7684quota Raises: NotImplementedError: [description] Returns: int: [description] \"\"\" raise NotImplementedError async def get_security_list ( self ) -> numpy . ndarray : \"\"\"fetch security list from server. The returned list is a numpy.ndarray, which each elements should look like: code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock 000002.XSHE \u4e07\u79d1A WKA 1991-01-29 2200-01-01 stock all fields are string type Returns: numpy.ndarray: [description] \"\"\" raise NotImplementedError async def get_bars ( self , sec : str , end : Frame , n_bars : int , frame_type : FrameType , allow_unclosed = True , ) -> numpy . ndarray : \"\"\"\u53d6n\u4e2a\u5355\u4f4d\u7684k\u7ebf\u6570\u636e\u3002 k\u7ebf\u5468\u671f\u7531frame_type\u6307\u5b9a\u3002\u6700\u540e\u7ed3\u675f\u5468\u671f\u4e3aend\u3002\u80a1\u7968\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u4f1a\u4f7f\u7528None\u586b\u5145\u3002 Args: sec (str): \u8bc1\u5238\u4ee3\u7801 end (Frame): n_bars (int): frame_type (FrameType): allow_unclosed (bool): \u4e3a\u771f\u65f6\uff0c\u5f53\u524d\u672a\u7ed3\u675f\u7684\u5e27\u6570\u636e\u4e5f\u83b7\u53d6 Returns: a numpy.ndarray, with each element is: 'frame': datetime.date or datetime.datetime, depends on frame_type. Denotes which time frame the data belongs . 'open, high, low, close': float 'volume': double 'amount': the buy/sell amount in total, double 'factor': float, may exist or not \"\"\" raise NotImplementedError async def get_price ( self , sec : Union [ List , str ], end_at : Union [ str , datetime . datetime ], n_bars : int , frame_type : str , ) -> Dict [ str , numpy . recarray ]: raise NotImplementedError async def create_instance ( self , ** kwargs ): raise NotImplementedError async def get_all_trade_days ( self ): \"\"\"\u8fd4\u56de\u4ea4\u6613\u65e5\u5386\u3002\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u8fd4\u56de\u7684\u65f6\u95f4\u8de8\u5ea6\u4e0d\u4e00\u6837\uff0c\u4f46\u76f8\u540c\u8de8\u5ea6\u5185\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u3002\u5bf9\u5df2 \u7ecf\u8fc7\u53bb\u7684\u4ea4\u6613\u65e5\uff0c\u53ef\u4ee5\u7528\u4e0a\u8bc1\u6307\u6570\u6765\u9a8c\u8bc1\u3002 \"\"\" raise NotImplementedError async def get_valuation ( self , code : Union [ str , List [ str ]], day : Frame ) -> numpy . ndarray : \"\"\"\u8bfb\u53d6code\u6307\u5b9a\u7684\u80a1\u7968\u5728date\u6307\u5b9a\u65e5\u671f\u7684\u5e02\u503c\u6570\u636e\u3002 \u8fd4\u56de\u6570\u636e\u5305\u62ec\uff1a code: \u80a1\u7968\u4ee3\u7801 day: \u65e5\u671f captialization: \u603b\u80a1\u672c circulating_cap: \u6d41\u901a\u80a1\u672c\uff08\u4e07\u80a1\uff09 market_cap: \u603b\u5e02\u503c\uff08\u4ebf\u5143\uff09 circulating_market_cap\uff1a \u6d41\u901a\u5e02\u503c\uff08\u4ebf\u5143\uff09 turnover_ration: \u6362\u624b\u7387\uff08%\uff09 pe_ratio: \u5e02\u76c8\u7387\uff08PE,TTM\uff09\u6bcf\u80a1\u5e02\u4ef7\u4e3a\u6bcf\u80a1\u6536\u76ca\u7684\u500d\u6570\uff0c\u53cd\u6620\u6295\u8d44\u4eba\u5bf9\u6bcf\u5143\u51c0\u5229\u6da6\u6240\u613f\u652f\u4ed8\u7684\u4ef7 \u683c\uff0c\u7528\u6765\u4f30\u8ba1\u80a1\u7968\u7684\u6295\u8d44\u62a5\u916c\u548c\u98ce\u9669 pe_ratio_lyr: \u5e02\u76c8\u7387\uff08PE\uff09\uff0c\u4ee5\u4e0a\u4e00\u5e74\u5ea6\u6bcf\u80a1\u76c8\u5229\u8ba1\u7b97\u7684\u9759\u6001\u5e02\u76c8\u7387. \u80a1\u4ef7/\u6700\u8fd1\u5e74\u5ea6\u62a5\u544aEPS pb_ratio: \u5e02\u51c0\u7387\uff08PB\uff09 ps_ratio: \u5e02\u9500\u7387(PS) pcf_ratio: \u5e02\u73b0\u7387\uff08PCF\uff09 Args: code (Union[str, List[str]]): [description] day (Frame): [description] Returns: numpy.ndarray: [description] \"\"\" raise NotImplementedError async def get_fund_list ( self , codes : Union [ str , List [ str ]] = None ) -> numpy . ndarray : \"\"\" \u83b7\u53d6\u6240\u6709\u7684\u57fa\u91d1\u57fa\u672c\u4fe1\u606f Args: codes (Union[str, List[str]]): [description] Returns: np.array: [\u57fa\u91d1\u7684\u57fa\u672c\u4fe1\u606f] \"\"\" raise NotImplementedError async def get_fund_portfolio_stock ( self , codes : Union [ str , List [ str ]], pub_date : Union [ str , datetime . date ] = None ) -> numpy . array : raise NotImplementedError async def get_fund_net_value ( self , codes : Union [ str , List [ str ]], day : datetime . date = None , ) -> numpy . array : raise NotImplementedError async def get_fund_share_daily ( self , codes : Union [ str , List [ str ]] = None , day : datetime . date = None ) -> numpy . array : raise NotImplementedError @deprecation . deprecated ( deprecated_in = \"0.2\" , removed_in = \"0.3\" , current_version = __version__ , details = \"Use get_quota instead\" , ) async def get_query_count ( self ): \"\"\"\u67e5\u8be2\u5f53\u65e5\u5269\u4f59\u53ef\u8c03\u7528\u6570\u636e\u6761\u6570\"\"\" raise NotImplementedError","title":"QuotesFetcher"},{"location":"api/#coretypes.quote_fetcher.QuotesFetcher.get_all_trade_days","text":"\u8fd4\u56de\u4ea4\u6613\u65e5\u5386\u3002\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u8fd4\u56de\u7684\u65f6\u95f4\u8de8\u5ea6\u4e0d\u4e00\u6837\uff0c\u4f46\u76f8\u540c\u8de8\u5ea6\u5185\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u3002\u5bf9\u5df2 \u7ecf\u8fc7\u53bb\u7684\u4ea4\u6613\u65e5\uff0c\u53ef\u4ee5\u7528\u4e0a\u8bc1\u6307\u6570\u6765\u9a8c\u8bc1\u3002 Source code in coretypes/quote_fetcher.py async def get_all_trade_days ( self ): \"\"\"\u8fd4\u56de\u4ea4\u6613\u65e5\u5386\u3002\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u8fd4\u56de\u7684\u65f6\u95f4\u8de8\u5ea6\u4e0d\u4e00\u6837\uff0c\u4f46\u76f8\u540c\u8de8\u5ea6\u5185\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u3002\u5bf9\u5df2 \u7ecf\u8fc7\u53bb\u7684\u4ea4\u6613\u65e5\uff0c\u53ef\u4ee5\u7528\u4e0a\u8bc1\u6307\u6570\u6765\u9a8c\u8bc1\u3002 \"\"\" raise NotImplementedError","title":"get_all_trade_days()"},{"location":"api/#coretypes.quote_fetcher.QuotesFetcher.get_bars","text":"\u53d6n\u4e2a\u5355\u4f4d\u7684k\u7ebf\u6570\u636e\u3002 k\u7ebf\u5468\u671f\u7531frame_type\u6307\u5b9a\u3002\u6700\u540e\u7ed3\u675f\u5468\u671f\u4e3aend\u3002\u80a1\u7968\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u4f1a\u4f7f\u7528None\u586b\u5145\u3002 Parameters: Name Type Description Default sec str \u8bc1\u5238\u4ee3\u7801 required end Frame required n_bars int required frame_type FrameType required allow_unclosed bool \u4e3a\u771f\u65f6\uff0c\u5f53\u524d\u672a\u7ed3\u675f\u7684\u5e27\u6570\u636e\u4e5f\u83b7\u53d6 True Returns: Type Description a numpy.ndarray, with each element is 'frame': datetime.date or datetime.datetime, depends on frame_type. Denotes which time frame the data belongs . 'open, high, low, close': float 'volume': double 'amount': the buy/sell amount in total, double 'factor': float, may exist or not Source code in coretypes/quote_fetcher.py async def get_bars ( self , sec : str , end : Frame , n_bars : int , frame_type : FrameType , allow_unclosed = True , ) -> numpy . ndarray : \"\"\"\u53d6n\u4e2a\u5355\u4f4d\u7684k\u7ebf\u6570\u636e\u3002 k\u7ebf\u5468\u671f\u7531frame_type\u6307\u5b9a\u3002\u6700\u540e\u7ed3\u675f\u5468\u671f\u4e3aend\u3002\u80a1\u7968\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u4f1a\u4f7f\u7528None\u586b\u5145\u3002 Args: sec (str): \u8bc1\u5238\u4ee3\u7801 end (Frame): n_bars (int): frame_type (FrameType): allow_unclosed (bool): \u4e3a\u771f\u65f6\uff0c\u5f53\u524d\u672a\u7ed3\u675f\u7684\u5e27\u6570\u636e\u4e5f\u83b7\u53d6 Returns: a numpy.ndarray, with each element is: 'frame': datetime.date or datetime.datetime, depends on frame_type. Denotes which time frame the data belongs . 'open, high, low, close': float 'volume': double 'amount': the buy/sell amount in total, double 'factor': float, may exist or not \"\"\" raise NotImplementedError","title":"get_bars()"},{"location":"api/#coretypes.quote_fetcher.QuotesFetcher.get_fund_list","text":"\u83b7\u53d6\u6240\u6709\u7684\u57fa\u91d1\u57fa\u672c\u4fe1\u606f Parameters: Name Type Description Default codes Union[str, List[str]] [description] None Returns: Type Description np.array [\u57fa\u91d1\u7684\u57fa\u672c\u4fe1\u606f] Source code in coretypes/quote_fetcher.py async def get_fund_list ( self , codes : Union [ str , List [ str ]] = None ) -> numpy . ndarray : \"\"\" \u83b7\u53d6\u6240\u6709\u7684\u57fa\u91d1\u57fa\u672c\u4fe1\u606f Args: codes (Union[str, List[str]]): [description] Returns: np.array: [\u57fa\u91d1\u7684\u57fa\u672c\u4fe1\u606f] \"\"\" raise NotImplementedError","title":"get_fund_list()"},{"location":"api/#coretypes.quote_fetcher.QuotesFetcher.get_query_count","text":"\u67e5\u8be2\u5f53\u65e5\u5269\u4f59\u53ef\u8c03\u7528\u6570\u636e\u6761\u6570 .. deprecated:: 0.2 This will be removed in 0.3. Use get_quota instead Source code in coretypes/quote_fetcher.py @deprecation . deprecated ( deprecated_in = \"0.2\" , removed_in = \"0.3\" , current_version = __version__ , details = \"Use get_quota instead\" , ) async def get_query_count ( self ): \"\"\"\u67e5\u8be2\u5f53\u65e5\u5269\u4f59\u53ef\u8c03\u7528\u6570\u636e\u6761\u6570\"\"\" raise NotImplementedError","title":"get_query_count()"},{"location":"api/#coretypes.quote_fetcher.QuotesFetcher.get_quota","text":"\u83b7\u53d6\u63a5\u53e3\u5f53\u524d\u53ef\u7528\u7684quota Exceptions: Type Description NotImplementedError [description] Returns: Type Description int [description] Source code in coretypes/quote_fetcher.py async def get_quota ( self ) -> int : \"\"\"\u83b7\u53d6\u63a5\u53e3\u5f53\u524d\u53ef\u7528\u7684quota Raises: NotImplementedError: [description] Returns: int: [description] \"\"\" raise NotImplementedError","title":"get_quota()"},{"location":"api/#coretypes.quote_fetcher.QuotesFetcher.get_security_list","text":"fetch security list from server. The returned list is a numpy.ndarray, which each elements should look like: code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock 000002.XSHE \u4e07\u79d1A WKA 1991-01-29 2200-01-01 stock all fields are string type Returns: Type Description numpy.ndarray [description] Source code in coretypes/quote_fetcher.py async def get_security_list ( self ) -> numpy . ndarray : \"\"\"fetch security list from server. The returned list is a numpy.ndarray, which each elements should look like: code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock 000002.XSHE \u4e07\u79d1A WKA 1991-01-29 2200-01-01 stock all fields are string type Returns: numpy.ndarray: [description] \"\"\" raise NotImplementedError","title":"get_security_list()"},{"location":"api/#coretypes.quote_fetcher.QuotesFetcher.get_valuation","text":"\u8bfb\u53d6code\u6307\u5b9a\u7684\u80a1\u7968\u5728date\u6307\u5b9a\u65e5\u671f\u7684\u5e02\u503c\u6570\u636e\u3002 \u8fd4\u56de\u6570\u636e\u5305\u62ec\uff1a code: \u80a1\u7968\u4ee3\u7801 day: \u65e5\u671f captialization: \u603b\u80a1\u672c circulating_cap: \u6d41\u901a\u80a1\u672c\uff08\u4e07\u80a1\uff09 market_cap: \u603b\u5e02\u503c\uff08\u4ebf\u5143\uff09 circulating_market_cap\uff1a \u6d41\u901a\u5e02\u503c\uff08\u4ebf\u5143\uff09 turnover_ration: \u6362\u624b\u7387\uff08%\uff09 pe_ratio: \u5e02\u76c8\u7387\uff08PE,TTM\uff09\u6bcf\u80a1\u5e02\u4ef7\u4e3a\u6bcf\u80a1\u6536\u76ca\u7684\u500d\u6570\uff0c\u53cd\u6620\u6295\u8d44\u4eba\u5bf9\u6bcf\u5143\u51c0\u5229\u6da6\u6240\u613f\u652f\u4ed8\u7684\u4ef7 \u683c\uff0c\u7528\u6765\u4f30\u8ba1\u80a1\u7968\u7684\u6295\u8d44\u62a5\u916c\u548c\u98ce\u9669 pe_ratio_lyr: \u5e02\u76c8\u7387\uff08PE\uff09\uff0c\u4ee5\u4e0a\u4e00\u5e74\u5ea6\u6bcf\u80a1\u76c8\u5229\u8ba1\u7b97\u7684\u9759\u6001\u5e02\u76c8\u7387. \u80a1\u4ef7/\u6700\u8fd1\u5e74\u5ea6\u62a5\u544aEPS pb_ratio: \u5e02\u51c0\u7387\uff08PB\uff09 ps_ratio: \u5e02\u9500\u7387(PS) pcf_ratio: \u5e02\u73b0\u7387\uff08PCF\uff09 Parameters: Name Type Description Default code Union[str, List[str]] [description] required day Frame [description] required Returns: Type Description numpy.ndarray [description] Source code in coretypes/quote_fetcher.py async def get_valuation ( self , code : Union [ str , List [ str ]], day : Frame ) -> numpy . ndarray : \"\"\"\u8bfb\u53d6code\u6307\u5b9a\u7684\u80a1\u7968\u5728date\u6307\u5b9a\u65e5\u671f\u7684\u5e02\u503c\u6570\u636e\u3002 \u8fd4\u56de\u6570\u636e\u5305\u62ec\uff1a code: \u80a1\u7968\u4ee3\u7801 day: \u65e5\u671f captialization: \u603b\u80a1\u672c circulating_cap: \u6d41\u901a\u80a1\u672c\uff08\u4e07\u80a1\uff09 market_cap: \u603b\u5e02\u503c\uff08\u4ebf\u5143\uff09 circulating_market_cap\uff1a \u6d41\u901a\u5e02\u503c\uff08\u4ebf\u5143\uff09 turnover_ration: \u6362\u624b\u7387\uff08%\uff09 pe_ratio: \u5e02\u76c8\u7387\uff08PE,TTM\uff09\u6bcf\u80a1\u5e02\u4ef7\u4e3a\u6bcf\u80a1\u6536\u76ca\u7684\u500d\u6570\uff0c\u53cd\u6620\u6295\u8d44\u4eba\u5bf9\u6bcf\u5143\u51c0\u5229\u6da6\u6240\u613f\u652f\u4ed8\u7684\u4ef7 \u683c\uff0c\u7528\u6765\u4f30\u8ba1\u80a1\u7968\u7684\u6295\u8d44\u62a5\u916c\u548c\u98ce\u9669 pe_ratio_lyr: \u5e02\u76c8\u7387\uff08PE\uff09\uff0c\u4ee5\u4e0a\u4e00\u5e74\u5ea6\u6bcf\u80a1\u76c8\u5229\u8ba1\u7b97\u7684\u9759\u6001\u5e02\u76c8\u7387. \u80a1\u4ef7/\u6700\u8fd1\u5e74\u5ea6\u62a5\u544aEPS pb_ratio: \u5e02\u51c0\u7387\uff08PB\uff09 ps_ratio: \u5e02\u9500\u7387(PS) pcf_ratio: \u5e02\u73b0\u7387\uff08PCF\uff09 Args: code (Union[str, List[str]]): [description] day (Frame): [description] Returns: numpy.ndarray: [description] \"\"\" raise NotImplementedError","title":"get_valuation()"},{"location":"api/#coretypes.types","text":"Zillionare\u4e2d\u8981\u7528\u5230\u7684\u6838\u5fc3\u6570\u636e\u7c7b\u578b\u90fd\u5b9a\u4e49\u5728\u6b64\u6a21\u5757\u4e2d\u3002\u6ce8\u610f\u90e8\u5206\u5b9a\u4e49\u4ec5\u80fd\u7528\u4f5cType Annotation\uff0c\u6bd4\u5982BarsArray\u7b49\u522b\u540d\u3002\u5b83\u4eec\u901a\u5e38\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934","title":"types"},{"location":"api/#coretypes.types.BarsArray","text":"\u884c\u60c5\u6570\u636e(\u5305\u542b\u5217frame, open, high, low, close, volume, amount, factor)\u6570\u7ec4","title":"BarsArray"},{"location":"api/#coretypes.types.BarsPanel","text":"\u5e26\u8bc1\u5238\u4ee3\u7801\u7684\u884c\u60c5\u6570\u636e\u6570\u7ec4","title":"BarsPanel"},{"location":"api/#coretypes.types.BarsWithLimitArray","text":"\u5e26\u6da8\u8dcc\u505c\u4ef7(high_limit, low_limit)\u7684\u884c\u60c5\u6570\u636e\u6570\u7ec4","title":"BarsWithLimitArray"},{"location":"api/#coretypes.types.Frame","text":"\u5305\u542b\u65e5\u671fdate\u548c\u65f6\u95f4datetime\u7684\u8054\u5408\u7c7b\u578b","title":"Frame"},{"location":"api/#coretypes.types.LimitPriceOnlyBarsArray","text":"\u4ec5\u5305\u62ec\u65e5\u671f\u3001\u4ee3\u7801\u3001\u6da8\u8dcc\u505c\u4ef7\u7684\u7684\u884c\u60c5\u6570\u636e\u6570\u7ec4","title":"LimitPriceOnlyBarsArray"},{"location":"api/#coretypes.types.bars_cols","text":"\u884c\u60c5\u6570\u636e\u5217\u540d\u6570\u7ec4\uff0c\u5373[frame, open, high, low, close, volume, amount, factor]","title":"bars_cols"},{"location":"api/#coretypes.types.bars_dtype","text":"\u884c\u60c5\u6570\u636e\u5143\u7c7b\u578b\uff0c\u5305\u62ec\u5b57\u6bb5\uff08frame, open, high, low, close, volume, amount, factor)","title":"bars_dtype"},{"location":"api/#coretypes.types.bars_dtype_with_code","text":"\u5e26\u8bc1\u5238\u4ee3\u7801\u7684\u884c\u60c5\u6570\u636e\u5143\u7c7b\u578b\uff0c\u5728bars_dtype\u57fa\u7840\u4e0a\u589e\u52a0\u4e86code\u5b57\u6bb5","title":"bars_dtype_with_code"},{"location":"api/#coretypes.types.bars_with_limit_cols","text":"\u5e26\u6da8\u8dcc\u505c\u4ef7\u7684\u884c\u60c5\u6570\u636e\u5217\u540d\u6570\u7ec4\uff0c\u5373[frame, open, high, low, close, volume, amount, factort high_limit, low_limit]","title":"bars_with_limit_cols"},{"location":"api/#coretypes.types.bars_with_limit_dtype","text":"\u5e26\u6da8\u8dcc\u505c\u4ef7\u683c\u7684\u884c\u60c5\u6570\u636e\u5143\u7c7b\u578b\uff0c\u5305\u542bframe, open, high, low, close, volume, amount, factort high_limit, low_limit","title":"bars_with_limit_dtype"},{"location":"api/#coretypes.types.limit_price_only_dtype","text":"\u53ea\u5305\u542b\u6da8\u8dcc\u505c\u4ef7\u7684\u884c\u60c5\u6570\u636e\u5143\u7c7b\u578b\uff0c\u5373frame, code, high_limit, low_limit","title":"limit_price_only_dtype"},{"location":"api/#coretypes.types.security_info_dtype","text":"\u8bc1\u5238\u4fe1\u606f\u7c7b\u578b\uff0c\u5305\u62eccode, alias, name, ipo, end, type\u5b57\u6bb5","title":"security_info_dtype"},{"location":"api/#coretypes.types.FrameType","text":"\u5bf9\u8bc1\u5238\u4ea4\u6613\u4e2dK\u7ebf\u5468\u671f\u7684\u5c01\u88c5\u3002\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u5bf9\u5e94\u5468\u671f: \u5468\u671f \u5b57\u7b26\u4e32 \u7c7b\u578b \u6570\u503c \u5e74\u7ebf 1Y FrameType.YEAR 10 \u5b63\u7ebf 1Q FrameType.QUARTER 9 \u6708\u7ebf 1M FrameType.MONTH 8 \u5468\u7ebf 1W FrameType.WEEK 7 \u65e5\u7ebf 1D FrameType.DAY 6 60\u5206\u949f\u7ebf 60m FrameType.MIN60 5 30\u5206\u949f\u7ebf 30m FrameType.MIN30 4 15\u5206\u949f\u7ebf 15m FrameType.MIN15 3 5\u5206\u949f\u7ebf 5m FrameType.MIN5 2 \u5206\u949f\u7ebf 1m FrameType.MIN1 1 Source code in coretypes/types.py class FrameType ( Enum ): \"\"\"\u5bf9\u8bc1\u5238\u4ea4\u6613\u4e2dK\u7ebf\u5468\u671f\u7684\u5c01\u88c5\u3002\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u5bf9\u5e94\u5468\u671f: | \u5468\u671f | \u5b57\u7b26\u4e32 | \u7c7b\u578b | \u6570\u503c | | --------- | --- | ------------------ | -- | | \u5e74\u7ebf | 1Y | FrameType.YEAR | 10 | | \u5b63\u7ebf | 1Q | FrameType.QUARTER | 9 | | \u6708\u7ebf | 1M | FrameType.MONTH | 8 | | \u5468\u7ebf | 1W | FrameType.WEEK | 7 | | \u65e5\u7ebf | 1D | FrameType.DAY | 6 | | 60\u5206\u949f\u7ebf | 60m | FrameType.MIN60 | 5 | | 30\u5206\u949f\u7ebf | 30m | FrameType.MIN30 | 4 | | 15\u5206\u949f\u7ebf | 15m | FrameType.MIN15 | 3 | | 5\u5206\u949f\u7ebf | 5m | FrameType.MIN5 | 2 | | \u5206\u949f\u7ebf | 1m | FrameType.MIN1 | 1 | \"\"\" DAY = \"1d\" MIN60 = \"60m\" MIN30 = \"30m\" MIN15 = \"15m\" MIN5 = \"5m\" MIN1 = \"1m\" WEEK = \"1w\" MONTH = \"1M\" QUARTER = \"1Q\" YEAR = \"1Y\" def to_int ( self ) -> int : \"\"\"\u8f6c\u6362\u4e3a\u6574\u6570\u8868\u793a\uff0c\u7528\u4e8e\u4e32\u884c\u5316\"\"\" mapping = { FrameType . MIN1 : 1 , FrameType . MIN5 : 2 , FrameType . MIN15 : 3 , FrameType . MIN30 : 4 , FrameType . MIN60 : 5 , FrameType . DAY : 6 , FrameType . WEEK : 7 , FrameType . MONTH : 8 , FrameType . QUARTER : 9 , FrameType . YEAR : 10 , } return mapping [ self ] @staticmethod def from_int ( frame_type : int ) -> \"FrameType\" : \"\"\"\u5c06\u6574\u6570\u8868\u793a\u7684`frame_type`\u8f6c\u6362\u4e3a`FrameType`\u7c7b\u578b\"\"\" mapping = { 1 : FrameType . MIN1 , 2 : FrameType . MIN5 , 3 : FrameType . MIN15 , 4 : FrameType . MIN30 , 5 : FrameType . MIN60 , 6 : FrameType . DAY , 7 : FrameType . WEEK , 8 : FrameType . MONTH , 9 : FrameType . QUARTER , 10 : FrameType . YEAR , } return mapping [ frame_type ] def __lt__ ( self , other ): if self . __class__ is other . __class__ : return self . to_int () < other . to_int () return NotImplemented def __le__ ( self , other ) -> bool : if self . __class__ is other . __class__ : return self . to_int () <= other . to_int () return NotImplemented def __ge__ ( self , other ) -> bool : if self . __class__ is other . __class__ : return self . to_int () >= other . to_int () return NotImplemented def __gt__ ( self , other ) -> bool : if self . __class__ is other . __class__ : return self . to_int () > other . to_int () return NotImplemented","title":"FrameType"},{"location":"api/#coretypes.types.MarketType","text":"\u5e02\u573a\u7c7b\u578b\u3002\u5f53\u524d\u652f\u6301\u7684\u7c7b\u578b\u4e3a\u4e0a\u4ea4\u6240 XSHG \u548c XSHE Source code in coretypes/types.py class MarketType ( Enum ): \"\"\"\u5e02\u573a\u7c7b\u578b\u3002\u5f53\u524d\u652f\u6301\u7684\u7c7b\u578b\u4e3a\u4e0a\u4ea4\u6240`XSHG`\u548c`XSHE`\"\"\" XSHG = \"XSHG\" XSHE = \"XSHE\"","title":"MarketType"},{"location":"api/#coretypes.types.SecurityType","text":"\u652f\u6301\u7684\u8bc1\u5238\u54c1\u79cd\u7c7b\u578b\u5b9a\u4e49 \u7c7b\u578b \u503c \u8bf4\u660e SecurityType.STOCK stock \u80a1\u7968\u7c7b\u578b SecurityType.INDEX index \u6307\u6570\u7c7b\u578b SecurityType.ETF etf ETF\u57fa\u91d1 SecurityType.FUND fund \u57fa\u91d1 SecurityType.LOF lof\uff0cLOF\u57fa\u91d1 SecurityType.FJA fja \u5206\u7ea7A\u57fa\u91d1 SecurityType.FJB fjb \u5206\u7ea7B\u57fa\u91d1 SecurityType.BOND bond \u503a\u5238\u57fa\u91d1 SecurityType.STOCK_B stock_b B\u80a1 SecurityType.UNKNOWN unknown \u672a\u77e5\u54c1\u79cd Source code in coretypes/types.py class SecurityType ( Enum ): \"\"\"\u652f\u6301\u7684\u8bc1\u5238\u54c1\u79cd\u7c7b\u578b\u5b9a\u4e49 | \u7c7b\u578b | \u503c | \u8bf4\u660e | | ------------------------ | --------- | ----- | | SecurityType.STOCK | stock | \u80a1\u7968\u7c7b\u578b | | SecurityType.INDEX | index | \u6307\u6570\u7c7b\u578b | | SecurityType.ETF | etf | ETF\u57fa\u91d1 | | SecurityType.FUND | fund | \u57fa\u91d1 | | SecurityType.LOF | lof\uff0cLOF\u57fa\u91d1 | | | SecurityType.FJA | fja | \u5206\u7ea7A\u57fa\u91d1 | | SecurityType.FJB | fjb | \u5206\u7ea7B\u57fa\u91d1 | | SecurityType.BOND | bond | \u503a\u5238\u57fa\u91d1 | | SecurityType.STOCK_B | stock_b | B\u80a1 | | SecurityType.UNKNOWN | unknown | \u672a\u77e5\u54c1\u79cd | \"\"\" STOCK = \"stock\" INDEX = \"index\" ETF = \"etf\" FUND = \"fund\" LOF = \"lof\" FJA = \"fja\" FJB = \"fjb\" FUTURES = \"futures\" BOND = \"bond\" STOCK_B = \"stock_b\" UNKNOWN = \"unknown\"","title":"SecurityType"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Aaron Yang code@jieyu.ai Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Aaron Yang code@jieyu.ai","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/zillionare/zillionare_core_types/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 zillionare core types could always use more documentation, whether as part of the official zillionare core types docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/zillionare/zillionare_core_types/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up zillionare_core_types for local development. Fork the zillionare_core_types repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/zillionare_core_types.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/zillionare/zillionare_core_types/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_zillionare_core_types ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/zillionare/zillionare_core_types/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"zillionare core types could always use more documentation, whether as part of the official zillionare core types docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/zillionare/zillionare_core_types/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up zillionare_core_types for local development. Fork the zillionare_core_types repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/zillionare_core_types.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/zillionare/zillionare_core_types/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_zillionare_core_types ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.5.2 \u00b6 \u589e\u52a0\u4e86LimitPriceOnlyBarsArray\u548climit_price_only_dtype\u4e24\u79cd\u7c7b\u578b 0.5.1 (2022-08-08) \u00b6 \u4fee\u590d\u4e86\u627e\u5230\u5230mike[doc]\u5b89\u88c5\u5305\u7684\u9519\u8bef\u3002 0.5. \uff082022-08-06\uff09 \u00b6 breaking changes \u00b6 bars_dtype\u7b49\u7c7b\u578b\u4e2d\u7684frame\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7531Object\u6539\u4e3anp.datetime64[s]\uff0c\u8fd9\u4e2a\u4fee\u6539\u5c06\u6709\u5229\u4e8e\u66f4\u5feb\u8fdb\u884c\u89e3\u6790\u3002 Features \u00b6 \u589e\u52a0\u4e86BarsArray, BarsPanel\u548cBarsWithLimitArray\u6570\u636e\u7c7b\u578b security_db_dtype, security_info_dtype, xrxd_info_dtype 0.1.0 (2022-01-12) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#052","text":"\u589e\u52a0\u4e86LimitPriceOnlyBarsArray\u548climit_price_only_dtype\u4e24\u79cd\u7c7b\u578b","title":"0.5.2"},{"location":"history/#051-2022-08-08","text":"\u4fee\u590d\u4e86\u627e\u5230\u5230mike[doc]\u5b89\u88c5\u5305\u7684\u9519\u8bef\u3002","title":"0.5.1 (2022-08-08)"},{"location":"history/#05-2022-08-06","text":"","title":"0.5. \uff082022-08-06\uff09"},{"location":"history/#breaking-changes","text":"bars_dtype\u7b49\u7c7b\u578b\u4e2d\u7684frame\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7531Object\u6539\u4e3anp.datetime64[s]\uff0c\u8fd9\u4e2a\u4fee\u6539\u5c06\u6709\u5229\u4e8e\u66f4\u5feb\u8fdb\u884c\u89e3\u6790\u3002","title":"breaking changes"},{"location":"history/#features","text":"\u589e\u52a0\u4e86BarsArray, BarsPanel\u548cBarsWithLimitArray\u6570\u636e\u7c7b\u578b security_db_dtype, security_info_dtype, xrxd_info_dtype","title":"Features"},{"location":"history/#010-2022-01-12","text":"First release on PyPI.","title":"0.1.0 (2022-01-12)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install zillionare core types, run this command in your terminal: 1 $ pip install zillionare_core_types This is the preferred method to install zillionare core types, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for zillionare core types can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/zillionare/zillionare_core_types Or download the tarball : 1 $ curl -OJL https://github.com/zillionare/zillionare_core_types/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install zillionare core types, run this command in your terminal: 1 $ pip install zillionare_core_types This is the preferred method to install zillionare core types, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for zillionare core types can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/zillionare/zillionare_core_types Or download the tarball : 1 $ curl -OJL https://github.com/zillionare/zillionare_core_types/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use zillionare core types in a project 1 from coretypes import Frame, FrameType","title":"usage"},{"location":"usage/#usage","text":"To use zillionare core types in a project 1 from coretypes import Frame, FrameType","title":"Usage"}]}